/**
 * copyright 2019 (C) ELAIYA
 *
 * created on: Aug, 2019
 * @author: Elaiya Raja E
 *
 * ---------------------------------------------------------
 * Revision History (Release 1.0.0)
 * ---------------------------------------------------------
 * VERSION | AUTHOR - DATE       | DESCRIPTION OF CHANGE
 * ---------------------------------------------------------
 * 1.0     | ELAIYA - 13-08-2019 | Initial Creation
 * ---------------------------------------------------------
 *
 */

Apollo Server
~~~~~~~~~~~~~~
Apollo is a suite of tools to create GraphQL servers to consume GraphQL APIs. The tools provided by Apollo are three; Apollo Client, Apollo Server and Apollo Engine.
Apollo Client consumes your API from the frontend, usually through frameworks such as Vue.js and React.
Apollo Client helps you connect a GraphQL schema to an HTTP server in Node. It sits at your backend as part of your GraphQL server interfacing the GraphQL backend with clients, usually through Apollo Client.
Apollo Engine is a hosted SaaS using in production GraphQL server for caching, performance reporting, load measurement and error tracking amongst many other features.
Although they work together at various levels, each of these tools can be used independently. And they are all compatible with the GraphQL standard Specification.

Generating GraphQl Schema
~~~~~~~~~~~~~~~~~~~~~~~~~~
This is where we will need graphql-tools. To generate and use our schema, we will first describe it with in typeDefs with GraphQL language syntax, then add some resolver functions, then combine and use them with makeExecutableSchema.

Redis [https://redis.io/topics/quickstart]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Redis is an open source high-performance in-memory data structure store than can be used as a database, cache or message broker.
Redis is most loved database by developers worldwide, meaning that most developers want to continue working with it than any other database. As a cache, Redis is better and more efficient than memcached.
Redis comes with a simple command line tool redis-cli that provides a simple command-line interface to a Redis server.
In GraphQL, Redis is mostly used for the data persistent layer and with graphql subscriptions.

Redis installation steps
~~~~~~~~~~~~~~~~~~~~~~~~~~
Tip: Install Xcode if you like to use 'Make' command

curl -O http://download.redis.io/redis-stable.tar.gz
tar xvzf redis-stable.tar.gz
cd redis-stable
make test
make
redis-server

To verify Connection: redis-cli ping (it should return pong)

ioRedis [https://ioredis.readthedocs.io/en/latest/README]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ioredis is a robust, full-featured Redis client that is used in the world's biggest online commerce company Alibaba and many other awesome companies.
IO Redis is often perceived as a major improvement over node_redis (e.g. support for sentinel and cluster (completely missing in node_redis) and much better pubsub and Lua support).
Full-featured. It supports Cluster, Sentinel, Pipelining and of course Lua scripting & Pub/Sub (with the support of binary messages).
High performance.
Delightful API. It works with Node callbacks and Bluebird promises.
Transformation of command arguments and replies.
Transparent key prefixing.
Abstraction for Lua scripting, allowing you to define custom commands.
Support for binary data.
Support for TLS.
Support for offline queue and ready checking.
Support for ES6 types, such as Map and Set.
Support for GEO commands (Redis 3.2 Unstable).
Sophisticated error handling strategy.

